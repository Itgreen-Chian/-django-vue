# 发开环境配置文件
import os

"""
Django settings for meiduo_project project.

Generated by 'django-admin startproject' using Django 3.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# 查看导包路径
print(os.path)

# os.path.insert(0, os.path.join(BASE_DIR, 'apps'))
print('根路径：', BASE_DIR)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'xvlrh9#_#)7i6@k_e!!-5b3jbhq3eroy6vw(s9xf8lrzqy$&xx'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'meiduo_project.apps.users',  # 用户模块
    'meiduo_project.apps.contents',  # 首页广告模块
    'meiduo_project.apps.verifications',  # 验证码模块
    'meiduo_project.apps.oauth',  # 第三方qq登录
    'meiduo_project.apps.areas',  # 省市区三级联动收货地址
    'meiduo_project.apps.goods',  # 商品模块
    'meiduo_project.apps.carts',  # 购物车
    'meiduo_project.apps.orders',  # 订单
    'meiduo_project.apps.payment',  # 支付
    'django_crontab',  # 定时任务

    'haystack',  # 全文检索
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'meiduo_project.urls'

# TEMPLATES = [
#     {
#         'BACKEND': 'django.template.backends.django.DjangoTemplates',
#         'DIRS': [],
#         'APP_DIRS': True,
#         'OPTIONS': {
#             'context_processors': [
#                 'django.template.context_processors.debug',
#                 'django.template.context_processors.request',
#                 'django.contrib.auth.context_processors.auth',
#                 'django.contrib.messages.context_processors.messages',
#             ],
#         },
#     },
# ]


TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.jinja2.Jinja2',  # 配置jinja2模板引擎
        'DIRS': [os.path.join(BASE_DIR, 'templates')],   # 配置模板加载路径
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
            # 补充jinja2模板引擎环境
            'environment': 'meiduo_project.utils.jinja2_env.jinja2_environment'
        },
    },
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'meiduo_project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    'default': {
        # 'ENGINE': 'django.db.backends.sqlite3',
        # 'NAME': BASE_DIR / 'db.sqlite3',
        'ENGINE': 'django.db.backends.mysql',
        'HOST': '192.168.157.133',
        'POST': '3306',
        'USER': 'itgreen',
        'PASSWORD': '12345',
        'NAME': 'meiduo'
    }
}

# 配置redis数据库
CACHES = {
    "default": {  # 默认
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://192.168.157.133:6379/0",
        "OPTIONS": {
            "CLIENT": "django_redis.client.DefaultClient"
        }
    },
    "session": {  # session状态保持设置为1号库存储 分库保存
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://192.168.157.133:6379/1",
        "OPTIONS": {
            "CLIENT": "django_redis.client.DefaultClient"
        }
    },
    "verify": {  # 验证码保存库
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://192.168.157.133:6379/2",
        "OPTIONS": {
            "CLIENT": "django_redis.client.DefaultClient"
        }
    },
    "history": {  # 验证码保存库
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://192.168.157.133:6379/3",
        "OPTIONS": {
            "CLIENT": "django_redis.client.DefaultClient"
        }
    },
    "carts": {  # 验证码保存库
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://192.168.157.133:6379/4",
        "OPTIONS": {
            "CLIENT": "django_redis.client.DefaultClient"
        }
    },
}
SESSION_ENGINE = "django.contrib.sessions.backends.cache"  # cache:缓存，session 引擎数据缓存
SESSION_CACHE_ALIAS = "session"  # session缓存数据库别名

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'
# 配置静态文件加载路径
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]

# 配置日志
BASE_LOG_DIR = os.path.join(BASE_DIR, "logs")  # 日志文件路径
LOGGING = {
    'version': 1,  # 保留字
    'disable_existing_loggers': False,  # 是否禁用已经存在的logger实例
    # 日志文件的格式
    'formatters': {
        # 详细的日志格式
        'standard': {
            'format': '[%(asctime)s][%(threadName)s:%(thread)d][task_id:%(name)s][%(filename)s:%(lineno)d]'
                      '[%(levelname)s][%(message)s]'
        },
        # 简单的日志格式
        'simple': {
            'format': '[%(levelname)s][%(asctime)s][%(filename)s:%(lineno)d]%(message)s'
        },
        # 定义一个特殊的日志格式
        'collect': {
            'format': '%(message)s'
        }
    },
    # 过滤器
    'filters': {
        'require_debug_true': {  # django在debug模式下才输出日志
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    # 处理器
    'handlers': {
        # 在终端打印
        'console': {
            'level': 'INFO',
            'filters': ['require_debug_true'],  # 只有在Django debug为True时才在屏幕打印日志
            'class': 'logging.StreamHandler',  #
            'formatter': 'simple'
        },
        # 默认的
        'default': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',  # 保存到文件，自动切
            'filename': os.path.join(BASE_LOG_DIR, "test_info.log"),  # 日志文件
            'maxBytes': 1024 * 1024 * 50,  # 日志大小 50M
            'backupCount': 10,  # 最多备份几个
            'formatter': 'standard',
            'encoding': 'utf-8',
        },
        # 专门用来记错误日志
        'error': {
            'level': 'ERROR',
            'class': 'logging.handlers.RotatingFileHandler',  # 保存到文件，自动切
            'filename': os.path.join(BASE_LOG_DIR, "test_err.log"),  # 日志文件
            'maxBytes': 1024 * 1024 * 50,  # 日志大小 50M
            'backupCount': 5,
            'formatter': 'standard',
            'encoding': 'utf-8',
        },
        # 专门定义一个收集特定信息的日志
        'collect': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',  # 保存到文件，自动切
            'filename': os.path.join(BASE_LOG_DIR, "test_collect.log"),
            'maxBytes': 1024 * 1024 * 50,  # 日志大小 50M
            'backupCount': 5,
            'formatter': 'collect',
            'encoding': "utf-8"
        }
    },
    'loggers': {
       # 默认的logger应用如下配置
        'django': {
            'handlers': ['default', 'console', 'error'],  # 上线之后可以把'console'移除
            'level': 'DEBUG',
            'propagate': True,  # 向不向更高级别的logger传递
        },
        # 名为 'collect'的logger还单独处理
        'collect': {
            'handlers': ['console', 'collect'],
            'level': 'INFO',
        },
    },
}

# 指定自定义的用户模型类；值的语法==>‘子应用.用户模型类’
AUTH_USER_MODEL = 'users.User'

# 指定自定义用户认证后端
AUTHENTICATION_BACKENDS = ['meiduo_project.apps.users.utils.UsernameMobileAuthBackend']

# 判断用户是否登录后，指定为登录用户重定向的地址（用户中心用到）
LOGIN_URL = '/login/'

# QQ登录的配置参数
QQ_CLIENT_ID = '101518219'
QQ_CLIENT_SECRET = '418d84ebdc7241efb79536886ae95224'
QQ_REDIRECT_URI = 'http://www.meiduo.site:8000/oauth_callback'

# 配置邮箱服务器-用户中心邮箱绑定
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'  # 指定邮件后端
EMAIL_HOST = 'smtp.163.com'  # 发邮件主机
EMAIL_PORT = 25  # 发邮件端口
EMAIL_HOST_USER = 'itgreen@163.com'  # 授权的邮箱
EMAIL_HOST_PASSWORD = 'MMBZDATGHVFBDZNZ'  # 邮箱授权时获得的密码，非注册登录密码
EMAIL_FROM = '美多商城<itgreen@163.com>'  # 发件人抬头

# 邮箱验证链接
EMAIL_VERIFY_URL = 'http://www.meiduo.site:8000/emails/verification/'

# celery配置测试
CELERY_TASK_SERIALIZER = 'pickle'

CELERY_RESULT_SERIALIZER = 'pickle'

CELERY_ACCEPT_CONTENT = ['pickle', 'json']

# 指定自定义的Django文件存储类
DEFAULT_FILE_STORAGE = 'meiduo_project.utils.fastdfs.fdfs_storage.FastDFSStorage'

# FastDFS相关参数
# FDFS_BASE_URL = 'http://192.168.157.133:8888/'
FDFS_BASE_URL = 'http://image.meiduo.site:8888/'

# Haystack
HAYSTACK_CONNECTIONS = {
    'default': {
        'ENGINE': 'haystack.backends.elasticsearch_backend.ElasticsearchSearchEngine',
        'URL': 'http://192.168.157.133:9200/',  # Elasticsearch服务器ip地址，端口号固定为9200
        'INDEX_NAME': 'meiduo_mall',  # Elasticsearch建立的索引库的名称
    },
}

# 当添加、修改、删除数据时，自动生成索引
HAYSTACK_SIGNAL_PROCESSOR = 'haystack.signals.RealtimeSignalProcessor'

# haystack分页时每页记录数
HAYSTACK_SEARCH_RESULTS_PER_PAGE = 5


# 定时器配置
CRONJOBS = (
    # 每1分钟生成一次首页静态文件：1、任务时间（分、时、天、月）； 2、任务方法； 3、任务日志路径
    ('*/2 * * * *', 'meiduo_project.apps.contents.crons.generate_static_index_html', '>> ' + os.path.join(os.path.dirname(BASE_DIR), 'logs/crontab.log')),
)

# 指定中文编码格式
CRONTAB_COMMAND_PREFIX = 'LANG_ALL=zh_cn.UTF-8'

"""
添加定时任务到系统中:python manage.py crontab add; 
显示已激活的定时任务:python manage.py crontab show; 
移除定时任务: python manage.py crontab remove
'>> ' + os.path.join(os.path.dirname(BASE_DIR), 'logs/crontab.log')
meiduo_project.apps.
 '>> %s/crontab.log' % os.path.join(BASE_DIR, 'logs')
"""